// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Util$HeroGuild = require("../util/Util.bs.js");
var Domain$HeroGuild = require("../domain/Domain.bs.js");
var Styles$HeroGuild = require("../Styles.bs.js");
var PartyForm$HeroGuild = require("./PartyForm.bs.js");

function QuestUi$QuestInfoCard(Props) {
  var context = Props.context;
  return React.createElement("div", {
              className: "max-w-xs rounded overflow-hidden shadow-lg p-2 m-2"
            }, React.createElement("p", undefined, "Description: " + context[/* title */0]), React.createElement("p", undefined, "Location: " + (
                  context[/* location */1] ? "Ruin" : "Forest"
                )), React.createElement("p", undefined, "Quest Type: " + (
                  context[/* questType */2] ? "Guard" : "Clear Monsters"
                )));
}

var QuestInfoCard = /* module */[/* make */QuestUi$QuestInfoCard];

function QuestUi$QuestResolver(Props) {
  var quest = Props.quest;
  var heroes = Props.heroes;
  var handleResolveQuest = Props.handleResolveQuest;
  var match = React.useState((function () {
          return false;
        }));
  var setShowParty = match[1];
  var showParty = match[0];
  var submitParty = function (party) {
    return Curry._2(handleResolveQuest, quest, party);
  };
  return React.createElement("div", undefined, React.createElement("button", {
                  className: Styles$HeroGuild.btnBlue,
                  type: "button",
                  onClick: (function (param) {
                      return Curry._1(setShowParty, (function (value) {
                                    return !value;
                                  }));
                    })
                }, showParty ? "Hide Party" : "Show Party"), showParty ? React.createElement(PartyForm$HeroGuild.make, {
                    heroes: heroes,
                    submitParty: submitParty
                  }) : null);
}

var QuestResolver = /* module */[/* make */QuestUi$QuestResolver];

function QuestUi$QuestOutcomeCard(Props) {
  var questHistory = Props.questHistory;
  var questDescriptions = $$Array.of_list(List.mapi((function (index, description) {
              return React.createElement("p", {
                          key: String(index)
                        }, description);
            }), List.map((function (encounter) {
                  return Util$HeroGuild.Strings[/* join */0](" ")(encounter[/* descriptions */0]);
                }), questHistory[/* encounters */1])));
  return React.createElement("div", {
              className: "rounded overflow-hidden shadow-lg p-2 m-2"
            }, React.createElement("p", undefined, "Quest complete: " + questHistory[/* quest */0][/* questContext */1][/* title */0]), questDescriptions);
}

var QuestOutcomeCard = /* module */[/* make */QuestUi$QuestOutcomeCard];

function QuestUi$SetupQuest(Props) {
  var quest = Props.quest;
  var heroes = Props.heroes;
  var startQuest = Props.startQuest;
  return React.createElement("div", {
              className: "block"
            }, React.createElement(QuestUi$QuestInfoCard, {
                  context: quest[/* questContext */1]
                }), React.createElement(PartyForm$HeroGuild.make, {
                  heroes: heroes,
                  submitParty: (function (party) {
                      return Curry._2(startQuest, quest, party);
                    })
                }));
}

var SetupQuest = /* module */[/* make */QuestUi$SetupQuest];

function QuestUi(Props) {
  var pendingQuests = Props.pendingQuests;
  var completedQuests = Props.completedQuests;
  var heroes = Props.heroes;
  var handleAddQuest = Props.handleAddQuest;
  var handleResolveQuest = Props.handleResolveQuest;
  var generateQuest = function (param) {
    return Domain$HeroGuild.BasicQuestGenerator[/* make */1](Util$HeroGuild.ConstGen[/* make */2](1), Util$HeroGuild.Id[/* newId */0]("quest"));
  };
  var questCards = $$Array.of_list(List.map((function (quest) {
              return React.createElement("div", {
                          key: quest[/* id */0]
                        }, React.createElement(QuestUi$QuestInfoCard, {
                              context: quest[/* questContext */1]
                            }), React.createElement(QuestUi$QuestResolver, {
                              quest: quest,
                              heroes: heroes,
                              handleResolveQuest: handleResolveQuest
                            }));
            }), pendingQuests));
  var questOutcomeCards = $$Array.of_list(List.map((function (questHistory) {
              return React.createElement(QuestUi$QuestOutcomeCard, {
                          questHistory: questHistory,
                          key: questHistory[/* quest */0][/* id */0]
                        });
            }), completedQuests));
  return React.createElement("div", {
              className: "m-2"
            }, React.createElement("button", {
                  className: Styles$HeroGuild.btnBlue,
                  type: "button",
                  onClick: (function (param) {
                      return Curry._1(handleAddQuest, generateQuest(/* () */0));
                    })
                }, "Generate Quest"), React.createElement("div", {
                  className: "flex flex-col sm:flex-row"
                }, questCards), React.createElement("p", undefined, "Completed Quests:"), React.createElement("div", {
                  className: "flex flex-col sm:flex-row"
                }, questOutcomeCards));
}

var make = QuestUi;

exports.QuestInfoCard = QuestInfoCard;
exports.QuestResolver = QuestResolver;
exports.QuestOutcomeCard = QuestOutcomeCard;
exports.SetupQuest = SetupQuest;
exports.make = make;
/* react Not a pure module */
