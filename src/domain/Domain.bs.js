// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var $$Map = require("bs-platform/lib/js/map.js");
var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Stream = require("bs-platform/lib/js/stream.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Util$HeroGuild = require("../util/Util.bs.js");

function getId(hero) {
  return hero[/* id */0];
}

function view(hero) {
  return /* record */[
          /* id */hero[/* id */0],
          /* name */hero[/* name */1],
          /* skill */hero[/* skill */2]
        ];
}

function ofName(name) {
  return /* record */[
          /* id */Util$HeroGuild.Id[/* newId */0]("hero"),
          /* name */name,
          /* skill */0.5
        ];
}

function make(id, name, skill) {
  return /* record */[
          /* id */id,
          /* name */name,
          /* skill */skill
        ];
}

var Hero = /* module */[
  /* getId */getId,
  /* view */view,
  /* ofName */ofName,
  /* make */make
];

function gold(value) {
  return /* Gold */[value];
}

var Reward = /* module */[/* gold */gold];

var compare = Caml_obj.caml_compare;

var SuccessMap = $$Map.Make(/* module */[/* compare */compare]);

function branch(difficulty, defaultOutcome, defaultNext, $staropt$star, param) {
  var optionalOutcomes = $staropt$star !== undefined ? Caml_option.valFromOption($staropt$star) : SuccessMap[/* empty */0];
  return /* Branch */Block.__(0, [
            difficulty,
            /* record */[
              /* defaultOutcome : record */[
                /* outcomeDetails */defaultOutcome,
                /* nextEncounter */defaultNext
              ],
              /* optionalOutcomes */optionalOutcomes
            ]
          ]);
}

function travel(difficulty, defaultOutcome, defaultNext, $staropt$star, param) {
  var optionalOutcomes = $staropt$star !== undefined ? Caml_option.valFromOption($staropt$star) : SuccessMap[/* empty */0];
  return /* Travel */Block.__(1, [
            difficulty,
            /* record */[
              /* defaultOutcome : record */[
                /* outcomeDetails */defaultOutcome,
                /* nextEncounter */defaultNext
              ],
              /* optionalOutcomes */optionalOutcomes
            ]
          ]);
}

function loot(difficulty, defaultOutcome, defaultNext, $staropt$star, param) {
  var optionalOutcomes = $staropt$star !== undefined ? Caml_option.valFromOption($staropt$star) : SuccessMap[/* empty */0];
  return /* Loot */Block.__(2, [
            difficulty,
            /* record */[
              /* defaultOutcome : record */[
                /* outcomeDetails */defaultOutcome,
                /* nextEncounter */defaultNext
              ],
              /* optionalOutcomes */optionalOutcomes
            ]
          ]);
}

function defend(difficulty, defaultOutcome, defaultNext, $staropt$star, param) {
  var optionalOutcomes = $staropt$star !== undefined ? Caml_option.valFromOption($staropt$star) : SuccessMap[/* empty */0];
  return /* Defend */Block.__(3, [
            difficulty,
            /* record */[
              /* defaultOutcome : record */[
                /* outcomeDetails */defaultOutcome,
                /* nextEncounter */defaultNext
              ],
              /* optionalOutcomes */optionalOutcomes
            ]
          ]);
}

function attack(difficulty, defaultOutcome, defaultNext, $staropt$star, param) {
  var optionalOutcomes = $staropt$star !== undefined ? Caml_option.valFromOption($staropt$star) : SuccessMap[/* empty */0];
  return /* Attack */Block.__(4, [
            difficulty,
            /* record */[
              /* defaultOutcome : record */[
                /* outcomeDetails */defaultOutcome,
                /* nextEncounter */defaultNext
              ],
              /* optionalOutcomes */optionalOutcomes
            ]
          ]);
}

function rest(difficulty, defaultOutcome, defaultNext, $staropt$star, param) {
  var optionalOutcomes = $staropt$star !== undefined ? Caml_option.valFromOption($staropt$star) : SuccessMap[/* empty */0];
  return /* Rest */Block.__(5, [
            difficulty,
            /* record */[
              /* defaultOutcome : record */[
                /* outcomeDetails */defaultOutcome,
                /* nextEncounter */defaultNext
              ],
              /* optionalOutcomes */optionalOutcomes
            ]
          ]);
}

function endQuest(param) {
  return /* End */0;
}

function travelDefault(difficulty, defaultOutcome, defaultNext) {
  return travel(difficulty, defaultOutcome, defaultNext, undefined, /* () */0);
}

function lootDefault(difficulty, defaultOutcome, defaultNext) {
  return loot(difficulty, defaultOutcome, defaultNext, undefined, /* () */0);
}

function defendDefault(difficulty, defaultOutcome, defaultNext) {
  return defend(difficulty, defaultOutcome, defaultNext, undefined, /* () */0);
}

function attackDefault(difficulty, defaultOutcome, defaultNext) {
  return attack(difficulty, defaultOutcome, defaultNext, undefined, /* () */0);
}

function restDefault(difficulty, defaultOutcome, defaultNext) {
  return rest(difficulty, defaultOutcome, defaultNext, undefined, /* () */0);
}

var Encounter = /* module */[
  /* SuccessMap */SuccessMap,
  /* branch */branch,
  /* travel */travel,
  /* loot */loot,
  /* defend */defend,
  /* attack */attack,
  /* rest */rest,
  /* endQuest */endQuest,
  /* travelDefault */travelDefault,
  /* lootDefault */lootDefault,
  /* defendDefault */defendDefault,
  /* attackDefault */attackDefault,
  /* restDefault */restDefault
];

var Quest = /* module */[/* Encounter */Encounter];

var q1 = loot(0.4, /* Reward */[/* Gold */[10]], /* End */0, undefined, /* () */0);

var q2Options = Curry._3(SuccessMap[/* add */3], 1.0, /* record */[
      /* outcomeDetails : DamageTaken */[0.0],
      /* nextEncounter */q1
    ], Curry._3(SuccessMap[/* add */3], 0.66, /* record */[
          /* outcomeDetails : DamageTaken */[5.0],
          /* nextEncounter */q1
        ], Curry._3(SuccessMap[/* add */3], 0.33, /* record */[
              /* outcomeDetails : DamageTaken */[10.0],
              /* nextEncounter */q1
            ], SuccessMap[/* empty */0])));

var q2 = defend(0.6, /* DamageTaken */[15.0], q1, Caml_option.some(q2Options), /* () */0);

var partial_arg = Caml_option.some(Curry._3(SuccessMap[/* add */3], 0.1, /* record */[
          /* outcomeDetails : BranchDescription */0,
          /* nextEncounter */q1
        ], SuccessMap[/* empty */0]));

function q(param) {
  return branch(0.0, /* BranchDescription */0, q2, partial_arg, param);
}

var r = /* Reward */[/* Gold */[12]];

var pipedQuest = lootDefault(0.4, r, /* End */0);

var bracketQuest = defendDefault(0.5, /* DamageTaken */[5.0], lootDefault(0.4, r, /* End */0));

var composedQuest = defendDefault(0.5, /* DamageTaken */[5.0], lootDefault(0.4, r, /* End */0));

var TestEncounters = /* module */[
  /* q1 */q1,
  /* q2Options */q2Options,
  /* q2 */q2,
  /* q */q,
  /* r */r,
  /* pipedQuest */pipedQuest,
  /* bracketQuest */bracketQuest,
  /* composedQuest */composedQuest
];

function basicEncounter(description) {
  return /* record */[
          /* descriptions : :: */[
            description,
            /* [] */0
          ],
          /* questActions : [] */0
        ];
}

function determineSuccess(party, encounter) {
  return /* tuple */[
          0.5,
          /* [] */0,
          /* [] */0
        ];
}

function pickBranchOutcome(party, success, outcomes) {
  return outcomes[/* defaultOutcome */0];
}

function resolveBranchOutcome(party, outcome) {
  return /* tuple */[
          /* [] */0,
          /* [] */0
        ];
}

function runEncounter(party, pastEncounters, questContext, encounter) {
  if (typeof encounter === "number") {
    return /* tuple */[
            /* record */[
              /* descriptions : [] */0,
              /* questActions : [] */0
            ],
            undefined
          ];
  } else if (encounter.tag) {
    return /* tuple */[
            /* record */[
              /* descriptions : [] */0,
              /* questActions : [] */0
            ],
            encounter[1][/* defaultOutcome */0][/* nextEncounter */1]
          ];
  } else {
    var outcome = encounter[1][/* defaultOutcome */0];
    return /* tuple */[
            /* record */[
              /* descriptions */List.concat(/* :: */[
                    /* [] */0,
                    /* :: */[
                      /* [] */0,
                      /* [] */0
                    ]
                  ]),
              /* questActions */List.concat(/* :: */[
                    /* [] */0,
                    /* :: */[
                      /* [] */0,
                      /* [] */0
                    ]
                  ])
            ],
            outcome[/* nextEncounter */1]
          ];
  }
}

function runRec(party, _pastEncounters, questContext, _encounter) {
  while(true) {
    var encounter = _encounter;
    var pastEncounters = _pastEncounters;
    var match = runEncounter(party, pastEncounters, questContext, encounter);
    var nextEncounter = match[1];
    var encounterList = List.append(pastEncounters, /* :: */[
          match[0],
          /* [] */0
        ]);
    if (nextEncounter !== undefined) {
      _encounter = nextEncounter;
      _pastEncounters = encounterList;
      continue ;
    } else {
      return encounterList;
    }
  };
}

function run(party, quest) {
  return /* record */[
          /* quest */quest,
          /* encounters */runRec(party, /* [] */0, quest[/* questContext */1], quest[/* firstEncounter */2])
        ];
}

var SimpleQuestRunner = /* module */[
  /* basicEncounter */basicEncounter,
  /* determineSuccess */determineSuccess,
  /* pickBranchOutcome */pickBranchOutcome,
  /* resolveBranchOutcome */resolveBranchOutcome,
  /* runEncounter */runEncounter,
  /* runRec */runRec,
  /* run */run
];

var ConstRandom = Util$HeroGuild.Random(Util$HeroGuild.ConstGen);

function make$1(seed, id) {
  var floats = Curry._3(ConstRandom[/* randomFloatStream */3], 0.0, 1.0, seed);
  var firstEncounter = travelDefault(Stream.next(floats), /* SupplyCost */[10], defendDefault(Stream.next(floats), /* DamageTaken */[5.0], attackDefault(Stream.next(floats), /* DamageDealt */[10.0], restDefault(Stream.next(floats), /* PotentialHeals */[5.0], lootDefault(Stream.next(floats), /* Reward */[/* Gold */[10]], /* End */0)))));
  return /* record */[
          /* id */id,
          /* questContext : record */[
            /* title */"A new dummy Quest with id = " + id,
            /* location : Forest */0,
            /* questType : ClearMonsters */0,
            /* seed */seed
          ],
          /* firstEncounter */firstEncounter
        ];
}

var BasicQuestGenerator = /* module */[
  /* ConstRandom */ConstRandom,
  /* make */make$1
];

exports.Hero = Hero;
exports.Reward = Reward;
exports.Quest = Quest;
exports.TestEncounters = TestEncounters;
exports.SimpleQuestRunner = SimpleQuestRunner;
exports.BasicQuestGenerator = BasicQuestGenerator;
/* SuccessMap Not a pure module */
