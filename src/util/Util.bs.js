// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Random = require("bs-platform/lib/js/random.js");
var Stream = require("bs-platform/lib/js/stream.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

var lastId = /* record */[/* contents */0];

function newId(prefix) {
  lastId[0] = lastId[0] + 1 | 0;
  return prefix + (":" + String(lastId[0]));
}

var Id = /* module */[/* newId */newId];

function next(a) {
  return /* tuple */[
          a,
          a
        ];
}

function split(a) {
  return /* tuple */[
          a,
          a
        ];
}

function make(a) {
  return a;
}

var ConstGen = /* module */[
  /* next */next,
  /* split */split,
  /* make */make
];

function Random$1(funarg) {
  var randomInt = function (min, max, g) {
    var match = Curry._1(funarg[/* next */0], g);
    Random.init(match[0]);
    var result = Random.$$int(max - min | 0) + min | 0;
    return /* tuple */[
            result,
            match[1]
          ];
  };
  var randomFloat = function (min, max, g) {
    var match = Curry._1(funarg[/* next */0], g);
    Random.init(match[0]);
    var result = Random.$$float(max - min) + min;
    return /* tuple */[
            result,
            match[1]
          ];
  };
  var generatorStream = function (f, g) {
    var state = /* record */[/* contents */g];
    return Stream.from((function (param) {
                  var match = Curry._1(f, state[0]);
                  state[0] = match[1];
                  return Caml_option.some(match[0]);
                }));
  };
  var randomIntStream = function (min, max, g) {
    return generatorStream((function (param) {
                  return randomInt(min, max, param);
                }), g);
  };
  var randomFloatStream = function (min, max, g) {
    return generatorStream((function (param) {
                  return randomFloat(min, max, param);
                }), g);
  };
  return /* module */[
          /* randomInt */randomInt,
          /* randomFloat */randomFloat,
          /* randomIntStream */randomIntStream,
          /* randomFloatStream */randomFloatStream
        ];
}

function join(sep) {
  return (function (param) {
      return List.fold_left((function (a, b) {
                    return a + (sep + b);
                  }), "", param);
    });
}

var Strings = /* module */[/* join */join];

exports.Id = Id;
exports.ConstGen = ConstGen;
exports.Random = Random$1;
exports.Strings = Strings;
/* No side effect */
