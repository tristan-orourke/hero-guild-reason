// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Random = require("bs-platform/lib/js/random.js");

function seedRandomGen(seed) {
  Random.init(seed);
  var nextInt = Random.bits(/* () */0);
  var seed1 = Random.bits(/* () */0);
  var seed2 = Random.bits(/* () */0);
  return /* record */[
          /* next */(function (param) {
              return /* tuple */[
                      nextInt,
                      seedRandomGen(seed1)
                    ];
            }),
          /* split */(function (param) {
              return /* tuple */[
                      seedRandomGen(seed1),
                      seedRandomGen(seed2)
                    ];
            })
        ];
}

function seedInt(seed, bound) {
  Random.init(seed);
  return Random.$$int(bound);
}

function seedFloat(seed, bound) {
  Random.init(seed);
  return Random.$$float(bound);
}

function seedSeed(seed) {
  Random.init(seed);
  return Random.bits(/* () */0);
}

function seedSeed2(seed) {
  Random.init(seed);
  return /* tuple */[
          Random.bits(/* () */0),
          Random.bits(/* () */0)
        ];
}

function seedRand(seed) {
  return /* record */[
          /* int */(function (param) {
              Random.init(seed);
              return Random.$$int(param);
            }),
          /* float */(function (param) {
              Random.init(seed);
              return Random.$$float(param);
            }),
          /* next */(function (param) {
              return seedRand((Random.init(seed), Random.bits(/* () */0)));
            }),
          /* split */(function (param) {
              var match = seedSeed2(seed);
              return /* tuple */[
                      seedRand(match[0]),
                      seedRand(match[1])
                    ];
            })
        ];
}

function seedRandFromGen(randomGen) {
  var match = Curry._1(randomGen[/* next */0], /* () */0);
  var seed = match[0];
  return /* record */[
          /* int */(function (param) {
              Random.init(seed);
              return Random.$$int(param);
            }),
          /* float */(function (param) {
              Random.init(seed);
              return Random.$$float(param);
            }),
          /* next */(function (param) {
              var match = Curry._1(randomGen[/* next */0], /* () */0);
              return seedRandFromGen(match[1]);
            }),
          /* split */(function (param) {
              var match = Curry._1(randomGen[/* split */1], /* () */0);
              return /* tuple */[
                      seedRandFromGen(match[0]),
                      seedRandFromGen(match[1])
                    ];
            })
        ];
}

exports.seedRandomGen = seedRandomGen;
exports.seedInt = seedInt;
exports.seedFloat = seedFloat;
exports.seedSeed = seedSeed;
exports.seedSeed2 = seedSeed2;
exports.seedRand = seedRand;
exports.seedRandFromGen = seedRandFromGen;
/* No side effect */
